<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.3.3">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2024-02-14T00:17:58+01:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">Data Adventures</title><subtitle>In this blog I will write about my adventures related to software development, statistics, data science, research, and similar. Will cover both hobby projects and actual work in the public domain.</subtitle><author><name>Aleksejs Fomins</name></author><entry><title type="html">Optimizing an automated sudoku solver in Python</title><link href="http://localhost:4000/meta/sudoku-solver/" rel="alternate" type="text/html" title="Optimizing an automated sudoku solver in Python" /><published>2024-02-13T00:00:00+01:00</published><updated>2024-02-13T00:00:00+01:00</updated><id>http://localhost:4000/meta/sudoku-solver</id><content type="html" xml:base="http://localhost:4000/meta/sudoku-solver/"><![CDATA[<p>As an avid sudoku enthusiast, and a fan of <a href="https://www.youtube.com/c/CrackingTheCryptic">Cracking The Cryptic</a>, I frequently find myself needing a little boost from my external brain. So, why not use this as an opportunity to exercise some coding optimization skills as well. In this post, I will cover the generic sudoku solver. In the future posts, I will cover using quick code snippets to brute force through some smaller sub-problems.</p>

<h2 id="the-setting">The Setting</h2>

<p>Sudoku is an <a href="http://www.cs.ox.ac.uk/people/paul.goldberg/FCS/sudoku.html">NP-complete</a> problem, which means that general-purpose solvers have to resort to brute-force search to solve them. Since the goal of this post is to practice some optimization, we will write a sudoku solver from scratch, and attempt to optimize it along the way.</p>

<h2 id="input-data">Input Data</h2>

<p>In order to test the performance of our solver, I have copied 5 examples of classical sudoku from sudoku.com website, and stored them in a basic text files. As we will later see, we would optimally need far more examples to make sure that our solvers work well on average, but this will do for now. Our text files are simple 9x9 grids, where unfilled spaces are marked with a space character, and filled spaces are digits. We can write a simple reader for such files as follows</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">with</span> <span class="nf">open</span><span class="p">(</span><span class="sh">'</span><span class="s">examples/grid_easy.dat</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">r</span><span class="sh">'</span><span class="p">)</span> <span class="k">as</span> <span class="n">f</span><span class="p">:</span>
    <span class="n">lines</span> <span class="o">=</span> <span class="n">f</span><span class="p">.</span><span class="nf">readlines</span><span class="p">()</span>
    <span class="n">lines</span> <span class="o">=</span> <span class="p">[</span><span class="n">l</span><span class="p">.</span><span class="nf">strip</span><span class="p">(</span><span class="sh">'</span><span class="se">\n</span><span class="sh">'</span><span class="p">).</span><span class="nf">replace</span><span class="p">(</span><span class="sh">'</span><span class="s"> </span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">0</span><span class="sh">'</span><span class="p">)</span> <span class="k">for</span> <span class="n">l</span> <span class="ow">in</span> <span class="n">lines</span><span class="p">]</span>
    <span class="n">grid</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="nf">array</span><span class="p">([[</span><span class="nf">int</span><span class="p">(</span><span class="n">c</span><span class="p">)</span> <span class="k">for</span> <span class="n">c</span> <span class="ow">in</span> <span class="n">l</span><span class="p">]</span> <span class="k">for</span> <span class="n">l</span> <span class="ow">in</span> <span class="n">lines</span><span class="p">])</span>
</code></pre></div></div>
<p>In the end we get a 2D Numpy array of integers, where empty cells are marked as zeroes.</p>

<h2 id="constraints">Constraints</h2>

<p>The family of sudoku puzzles are all about filling in missing digits in a grid, while keeping a certain set of constraints satisfied. In a classical sudoku, the digits in any row, column or any of the nine 3x3 boxes may not repeat. While it is easily possible to hard-code these constraints, it is my dream to ultimately extend this solver to be able to handle a wide variety of different sudoku challenges, and thus I would like to keep it as generic as possible. Thus, we will define a generic constraint class.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="n">typing</span> <span class="kn">import</span> <span class="n">Protocol</span>

<span class="k">class</span> <span class="nc">GenericConstraint</span><span class="p">(</span><span class="n">Protocol</span><span class="p">):</span>
    <span class="k">def</span> <span class="nf">test</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">grid</span><span class="p">:</span> <span class="n">np</span><span class="p">.</span><span class="n">ndarray</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">bool</span><span class="p">:</span>
      <span class="bp">...</span>

    <span class="k">def</span> <span class="nf">idxs_affected</span><span class="p">(</span><span class="n">self</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">np</span><span class="p">.</span><span class="n">ndarray</span><span class="p">:</span>
      <span class="bp">...</span>
</code></pre></div></div>

<p>Here, the <code class="language-plaintext highlighter-rouge">test</code> function would take a grid, and tell us if the constraint is satisfied, whereas <code class="language-plaintext highlighter-rouge">idxs_affected</code> would tell us the indices of the grid cells that the current constraint is going to use for its test. We don’t need the latter just yet, but may come in handy later.</p>

<p>For example, the row constraint from classical sudoku could look something like this</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">HorizontalSudokuConstraint</span><span class="p">(</span><span class="n">GenericConstraint</span><span class="p">):</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">idxRow</span><span class="p">:</span> <span class="nb">int</span><span class="p">):</span>
        <span class="n">self</span><span class="p">.</span><span class="n">idxRow</span> <span class="o">=</span> <span class="n">idxRow</span>

    <span class="k">def</span> <span class="nf">idxs_affected</span><span class="p">(</span><span class="n">self</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="p">[</span><span class="n">np</span><span class="p">.</span><span class="n">array</span><span class="p">,</span> <span class="n">np</span><span class="p">.</span><span class="n">array</span><span class="p">]:</span>
        <span class="k">return</span> <span class="n">np</span><span class="p">.</span><span class="nf">full</span><span class="p">(</span><span class="mi">9</span><span class="p">,</span> <span class="n">self</span><span class="p">.</span><span class="n">idxRow</span><span class="p">),</span> <span class="n">np</span><span class="p">.</span><span class="nf">arange</span><span class="p">(</span><span class="mi">9</span><span class="p">)</span>

    <span class="k">def</span> <span class="nf">test</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">grid</span><span class="p">:</span> <span class="n">np</span><span class="p">.</span><span class="n">array</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">bool</span><span class="p">:</span>
        <span class="n">digits</span> <span class="o">=</span> <span class="n">grid</span><span class="p">[</span><span class="n">self</span><span class="p">.</span><span class="n">idxRow</span><span class="p">]</span>
        <span class="k">return</span> <span class="nf">are_numbers_unique</span><span class="p">(</span><span class="n">digits</span><span class="p">[</span><span class="n">digits</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">])</span>
</code></pre></div></div>
<p>We would be initializing the constraint by telling it which row it applies to. The test would extract all of the digits of that row from the grid and check if they are all different. The <code class="language-plaintext highlighter-rouge">idxs_affected</code> would simply return the indices of all cells in that row.</p>

<p>We can now mix and match different constraints in order to define different sudoku problems. Here, we will consider constructing a classical 9x9 sudoku problem. However, it is easy to see that this can be generalized to other types of sudoku, such as <a href="https://sudoku.com/killer">killer sudoku</a>.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">ClassicalProblem</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="n">self</span><span class="p">):</span>
        <span class="n">self</span><span class="p">.</span><span class="n">constraints</span> <span class="o">=</span> <span class="p">[]</span>
        <span class="k">for</span> <span class="n">iRow</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="mi">9</span><span class="p">):</span>
            <span class="n">self</span><span class="p">.</span><span class="n">constraints</span> <span class="o">+=</span> <span class="p">[</span><span class="n">cs</span><span class="p">.</span><span class="nc">VerticalSudokuConstraint</span><span class="p">(</span><span class="n">iRow</span><span class="p">)]</span>
        <span class="k">for</span> <span class="n">iCol</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="mi">9</span><span class="p">):</span>
            <span class="n">self</span><span class="p">.</span><span class="n">constraints</span> <span class="o">+=</span> <span class="p">[</span><span class="n">cs</span><span class="p">.</span><span class="nc">HorizontalSudokuConstraint</span><span class="p">(</span><span class="n">iCol</span><span class="p">)]</span>
        <span class="k">for</span> <span class="n">iRow</span> <span class="ow">in</span> <span class="p">[</span><span class="mi">0</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">6</span><span class="p">]:</span>
            <span class="k">for</span> <span class="n">iCol</span> <span class="ow">in</span> <span class="p">[</span><span class="mi">0</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">6</span><span class="p">]:</span>
                <span class="n">self</span><span class="p">.</span><span class="n">constraints</span> <span class="o">+=</span> <span class="p">[</span><span class="n">cs</span><span class="p">.</span><span class="nc">BoxSudokuConstraint</span><span class="p">(</span><span class="n">iRow</span><span class="p">,</span> <span class="n">iCol</span><span class="p">)]</span>
</code></pre></div></div>
<p>So, our problem class is nothing more than a collection of different constraints that apply to this problem. For example, in a classical sudoku we have 9 horizontal constraints, 9 vertical constraints, and 9 box constraints.</p>

<h2 id="initial-algorithm">Initial algorithm</h2>

<p>The most naive solver would go over all possible combinations of digit positioning in the grid, and test if it matches. The number of attempts such a solver would do is \(9^m\), where \(m\) is the number of empty grid cells. Since the number of empty cells can be as large as 70, we are looking at \(9^{70} \approx 10^{67}\) iterations! Even if we do something smarter and only go over valid permutations of the available digits, this will still require years to complete. We have to take a different approach from the start.</p>

<p>One important observation is that it is not necessary to see all of the digits to prove that the solution does not work. Finding just one wrong digit (such as two of the same digit in the same row) is sufficient to discard the solution, regardless of the values of all the other digits. Thus, we will be filling in digits one at a time. The generic algorithm would be as follows</p>

<ol class="notice--primary">
  <li>Find all unfilled digits and enumerate them</li>
  <li>Start with the first unfilled digit, setting the current digit index to 0</li>
  <li>If the current digit index is -1, exit the loop, we are done</li>
  <li>Increment the current digit by 1, or set it to 1 if it is unfilled</li>
  <li>If the current digit is 10, then unset the current digit, decrease the digit index by 1, and go back to 3.</li>
  <li>Test all constraints. If any constraints fail, continue to 4.</li>
  <li>If all constraints pass, increment the digit index by 1</li>
  <li>If the digit index is equal to the number of unfilled digits, we have found a fitting solution. Output the solution, and decrease the digit index by 1.</li>
  <li>Return to 3.</li>
</ol>

<p>The example solver class would look somethinkg like the example below. The initializer finds the empty cells and arranges them in a 1D array to be filled in a sequence later. It also constructs a mapping between the 1D and 2D representations of the missing cells. The helper function <code class="language-plaintext highlighter-rouge">test</code> tests all of the constraints of the problem. The helper function <code class="language-plaintext highlighter-rouge">set</code> fills in a digit into the 1D array of the missing cells, and also in the corresponding missing cell in the 2D grid.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">BruteSolverV1</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">grid</span><span class="p">:</span> <span class="n">np</span><span class="p">.</span><span class="n">array</span><span class="p">,</span> <span class="n">problem</span><span class="p">:</span> <span class="n">ClassicalProblem</span><span class="p">):</span>
        <span class="n">self</span><span class="p">.</span><span class="n">grid</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="nf">copy</span><span class="p">(</span><span class="n">grid</span><span class="p">)</span>
        <span class="n">self</span><span class="p">.</span><span class="n">problem</span> <span class="o">=</span> <span class="n">problem</span>

        <span class="c1"># Step 1: Identify coordinates of all unfilled digits
</span>        <span class="n">self</span><span class="p">.</span><span class="n">idxsRow</span><span class="p">,</span> <span class="n">self</span><span class="p">.</span><span class="n">idxsCol</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="nf">where</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">grid</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span>
        <span class="n">self</span><span class="p">.</span><span class="n">nEmpty</span> <span class="o">=</span> <span class="nf">len</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">idxsRow</span><span class="p">)</span>
        <span class="n">self</span><span class="p">.</span><span class="n">empty1D</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="nf">zeros_like</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">idxsRow</span><span class="p">)</span>

    <span class="k">def</span> <span class="nf">test</span><span class="p">(</span><span class="n">self</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">bool</span><span class="p">:</span>
        <span class="k">for</span> <span class="n">constr</span> <span class="ow">in</span> <span class="n">self</span><span class="p">.</span><span class="n">problem</span><span class="p">.</span><span class="n">constraints</span><span class="p">:</span>
            <span class="k">if</span> <span class="ow">not</span> <span class="n">constr</span><span class="p">.</span><span class="nf">test</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">grid</span><span class="p">):</span>
                <span class="k">return</span> <span class="bp">False</span>
        <span class="k">return</span> <span class="bp">True</span>

    <span class="k">def</span> <span class="nf">set</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">idxEmpty1D</span><span class="p">:</span> <span class="nb">int</span><span class="p">,</span> <span class="n">val</span><span class="p">:</span> <span class="nb">int</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="bp">None</span><span class="p">:</span>
        <span class="n">self</span><span class="p">.</span><span class="n">empty1D</span><span class="p">[</span><span class="n">idxEmpty1D</span><span class="p">]</span> <span class="o">=</span> <span class="n">val</span>
        <span class="n">self</span><span class="p">.</span><span class="n">grid</span><span class="p">[</span><span class="n">self</span><span class="p">.</span><span class="n">idxsRow</span><span class="p">[</span><span class="n">idxEmpty1D</span><span class="p">],</span> <span class="n">self</span><span class="p">.</span><span class="n">idxsCol</span><span class="p">[</span><span class="n">idxEmpty1D</span><span class="p">]]</span> <span class="o">=</span> <span class="n">val</span>

    <span class="k">def</span> <span class="nf">solve</span><span class="p">(</span><span class="n">self</span><span class="p">):</span>
        <span class="n">idxEmpty1D</span> <span class="o">=</span> <span class="mi">0</span>
        <span class="k">while</span> <span class="bp">True</span><span class="p">:</span>
            <span class="k">if</span> <span class="n">idxEmpty1D</span> <span class="o">==</span> <span class="o">-</span><span class="mi">1</span><span class="p">:</span>
                <span class="c1"># First termination condition: if we are pointing at an index -1, finish. The loop has been exhausted
</span>                <span class="k">break</span>
            <span class="k">if</span> <span class="n">idxEmpty1D</span> <span class="o">==</span> <span class="n">self</span><span class="p">.</span><span class="n">nEmpty</span><span class="p">:</span>
                <span class="c1"># We have reached a plausible solution. Print it, and continue the loop
</span>                <span class="nf">print</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">grid</span><span class="p">)</span>
                <span class="n">idxEmpty1D</span> <span class="o">-=</span> <span class="mi">1</span>
                <span class="k">continue</span>

            <span class="c1"># Progressively increment the value of this cell, until a fitting value is found or all have failed
</span>            <span class="n">fits</span> <span class="o">=</span> <span class="bp">False</span>
            <span class="k">for</span> <span class="n">newVal</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">empty1D</span><span class="p">[</span><span class="n">idxEmpty1D</span><span class="p">]</span> <span class="o">+</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">10</span><span class="p">):</span>
                <span class="c1"># Set this value and test fitness
</span>                <span class="n">self</span><span class="p">.</span><span class="nf">set</span><span class="p">(</span><span class="n">idxEmpty1D</span><span class="p">,</span> <span class="n">newVal</span><span class="p">)</span>
                <span class="n">fits</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="nf">test</span><span class="p">()</span>

                <span class="k">if</span> <span class="n">fits</span><span class="p">:</span>
                    <span class="c1"># If this value fits, keep it, and continue fitting the next cell
</span>                    <span class="n">idxEmpty1D</span> <span class="o">+=</span> <span class="mi">1</span>
                    <span class="k">break</span>

            <span class="k">if</span> <span class="ow">not</span> <span class="n">fits</span><span class="p">:</span>
                <span class="c1"># If no remaining values fit, clear this square and revert to increasing the previous one
</span>                <span class="n">self</span><span class="p">.</span><span class="nf">set</span><span class="p">(</span><span class="n">idxEmpty1D</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span>
                <span class="n">idxEmpty1D</span> <span class="o">-=</span> <span class="mi">1</span>

</code></pre></div></div>

<h2 id="putting-it-all-together">Putting it all together</h2>

<p>Now that we have implemented all of the parts in their corresponding classes, our control panel class is going to be tiny</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="n">readers</span> <span class="kn">import</span> <span class="n">classical_reader</span>
<span class="kn">from</span> <span class="n">problems</span> <span class="kn">import</span> <span class="n">ClassicalProblem</span>
<span class="kn">from</span> <span class="n">solvers</span> <span class="kn">import</span> <span class="n">BruteSolverV1</span>

<span class="n">grid</span> <span class="o">=</span> <span class="nf">classical_reader</span><span class="p">(</span><span class="sh">'</span><span class="s">examples/grid_easy.dat</span><span class="sh">'</span><span class="p">)</span>
<span class="n">problem</span> <span class="o">=</span> <span class="nc">ClassicalProblem</span><span class="p">()</span>

<span class="n">bs</span> <span class="o">=</span> <span class="nc">BruteSolverV1</span><span class="p">(</span><span class="n">grid</span><span class="p">,</span> <span class="n">problem</span><span class="p">)</span>
<span class="n">bs</span><span class="p">.</span><span class="nf">solve</span><span class="p">()</span>
</code></pre></div></div>

<h2 id="optimization">Optimization</h2>

<p>The vigilant reader certainly would have spotted an obvious optimization by now. Not all constraints apply to all digit. For example, in a classical sudoku, exactly 3 constraints apply to each cell - the corresponding row, column and box constraints. If we can figure out what constraints apply to what cells, we can test only those constraints when changing any one digit. So, instead of 27 constraints, we now have 3 - a savings of a factor of 9 on the iteration part! For this, we need two things.</p>

<p>First, we need to find what the constraint indices that affect each cell. For this, we will use the <code class="language-plaintext highlighter-rouge">idxs_affected</code> function that we implemented before. We will find the cells affected by each constraint, then “invert” that list to find what constraints is each of the cells affected by. We add the following to the solver initializer</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># For each constraint, get cell indices that are affected by it
# Make a temporary map from 2D index to 1D index
</span><span class="n">idxs2Dto1D</span> <span class="o">=</span> <span class="p">{(</span><span class="n">iRow</span><span class="p">,</span> <span class="n">iCol</span><span class="p">):</span> <span class="n">i</span> <span class="k">for</span> <span class="n">i</span><span class="p">,</span> <span class="p">(</span><span class="n">iRow</span><span class="p">,</span> <span class="n">iCol</span><span class="p">)</span> <span class="ow">in</span> <span class="nf">enumerate</span><span class="p">(</span><span class="nf">zip</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">idxsRow</span><span class="p">,</span> <span class="n">self</span><span class="p">.</span><span class="n">idxsCol</span><span class="p">))}</span>

<span class="n">constr1Didxs</span> <span class="o">=</span> <span class="p">[]</span>
<span class="k">for</span> <span class="n">constr</span> <span class="ow">in</span> <span class="n">self</span><span class="p">.</span><span class="n">problem</span><span class="p">.</span><span class="n">constraints</span><span class="p">:</span>
    <span class="n">xIdxs</span><span class="p">,</span> <span class="n">yIdxs</span> <span class="o">=</span> <span class="n">constr</span><span class="p">.</span><span class="nf">idxs_affected</span><span class="p">()</span>
    <span class="n">constr1Didxs</span> <span class="o">+=</span> <span class="p">[[</span><span class="n">idxs2Dto1D</span><span class="p">[(</span><span class="n">iRow</span><span class="p">,</span> <span class="n">iCol</span><span class="p">)]</span> <span class="k">for</span> <span class="n">iRow</span><span class="p">,</span> <span class="n">iCol</span> <span class="ow">in</span> <span class="nf">zip</span><span class="p">(</span><span class="n">xIdxs</span><span class="p">,</span> <span class="n">yIdxs</span><span class="p">)</span> <span class="nf">if </span><span class="p">(</span><span class="n">iRow</span><span class="p">,</span> <span class="n">iCol</span><span class="p">)</span> <span class="ow">in</span> <span class="n">idxs2Dto1D</span><span class="p">]]</span>

<span class="c1"># For each empty cell, find indices of constraints that affect it
</span><span class="n">self</span><span class="p">.</span><span class="n">empty1DconstrIdxs</span> <span class="o">=</span> <span class="p">[]</span>
<span class="k">for</span> <span class="n">iCell</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">nEmpty</span><span class="p">):</span>
    <span class="n">self</span><span class="p">.</span><span class="n">empty1DconstrIdxs</span> <span class="o">+=</span> <span class="p">[[</span><span class="n">iConstr</span> <span class="k">for</span> <span class="n">iConstr</span><span class="p">,</span> <span class="n">idxs</span> <span class="ow">in</span> <span class="nf">enumerate</span><span class="p">(</span><span class="n">constr1Didxs</span><span class="p">)</span> <span class="k">if</span> <span class="n">iCell</span> <span class="ow">in</span> <span class="n">idxs</span><span class="p">]]</span>
</code></pre></div></div>

<p>Second, the <code class="language-plaintext highlighter-rouge">test</code> function is now uses the cell index as an argument, and tests only the relevant cells</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">test</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">idxEmpty1D</span><span class="p">:</span> <span class="nb">int</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">bool</span><span class="p">:</span>
    <span class="c1"># Only test the constraints that are relevant for this cell
</span>    <span class="k">for</span> <span class="n">idxConstr</span> <span class="ow">in</span> <span class="n">self</span><span class="p">.</span><span class="n">empty1DconstrIdxs</span><span class="p">[</span><span class="n">idxEmpty1D</span><span class="p">]:</span>
        <span class="k">if</span> <span class="ow">not</span> <span class="n">self</span><span class="p">.</span><span class="n">problem</span><span class="p">.</span><span class="n">constraints</span><span class="p">[</span><span class="n">idxConstr</span><span class="p">].</span><span class="nf">test</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">grid</span><span class="p">):</span>
            <span class="k">return</span> <span class="bp">False</span>
    <span class="k">return</span> <span class="bp">True</span>
</code></pre></div></div>

<h2 id="experiment">Experiment</h2>

<p>There is another optimization I would like to do, but I am not quite sure how to go about it. It surely matters in what order our solver attempts to fill in the digits, but it is not obvious to me what the optimal order would be, or whether there is an optimal order. I am convinced that some heuristics can do better than others, and even if we cannot arrive at an optimal solution, we can try to get a good one. Thus, we will conduct an experiment.</p>

<p>Firstly, we will attempt to fill the digits in a random order. The order of the digits will be selected at the start for the solver, and kept throughout the solution. We will run this a few times and see what solution times we get for different sudoku examples. The implementation of this solution can be found in the full code at the end of this post. In short, we will require an additional mapping between the original 1D sequence of empty cells, and the order in which we will actually visit them. In this case, the new order is a random permutation.</p>

<p>Secondly, I want to try a heuristic which naively seems like it could work. Specifically, we can initially go over all empty cells in the grid and check how many options satisfy the constraints. Then visit the cells in the order of increasing number of options (visiting the most constrained cells first). On the first sight it makes sense - we start with less possible branches, and visit the less constrained cells once a large fraction of the grid has already been filled in. It is what a human would do. Again, the implementation of this is quite simple, compared to what we have already done. It can be found in the full code.</p>

<h2 id="results">Results</h2>

<p>So, we have 4 different algorithms</p>
<ul>
  <li><strong>BruteSolverV1</strong> - the original solver</li>
  <li><strong>BruteSolverV2</strong> - like V1, but using less constraints</li>
  <li><strong>BruteSolverV3</strong> - like V2, but filling numbers in a random order</li>
  <li><strong>BruteSolverV4</strong> - like V2, but filling numbers in the order of increasing number of options (in the initial puzzle).</li>
</ul>

<p>We also have 5 different example sudoku puzzles</p>
<ul>
  <li><code class="language-plaintext highlighter-rouge">grid_easy.dat</code></li>
  <li><code class="language-plaintext highlighter-rouge">grid_easy2.dat</code></li>
  <li><code class="language-plaintext highlighter-rouge">grid_medium.dat</code></li>
  <li><code class="language-plaintext highlighter-rouge">grid_medium2.dat</code></li>
  <li><code class="language-plaintext highlighter-rouge">grid_hard.dat</code></li>
</ul>

<p>In the below table I show the average runtime in seconds for each solver and each problem. For the V3, I give the 90% confidence interval out of 50 different runs.</p>

<table>
  <tbody>
    <tr>
      <td> </td>
      <td>V1</td>
      <td>V2</td>
      <td>V3</td>
      <td>V4</td>
    </tr>
    <tr>
      <td>Easy1</td>
      <td>0.25</td>
      <td>0.22</td>
      <td>0.9-30.0</td>
      <td>0.23</td>
    </tr>
    <tr>
      <td>Easy2</td>
      <td>0.22</td>
      <td>0.20</td>
      <td>Did not test</td>
      <td>0.20</td>
    </tr>
    <tr>
      <td>Medium1</td>
      <td>0.42</td>
      <td>0.24</td>
      <td>Did not test</td>
      <td>0.22</td>
    </tr>
    <tr>
      <td>Medium2</td>
      <td>1.56</td>
      <td>0.43</td>
      <td>Did not test</td>
      <td>7.07</td>
    </tr>
    <tr>
      <td>Hard1</td>
      <td>61.35</td>
      <td>10.50</td>
      <td>Did not test</td>
      <td>3.43</td>
    </tr>
  </tbody>
</table>

<p>We can make the following observations:</p>
<ul>
  <li>V2 indeed performs better than V1, but the improvement factor is less than 9, since we also spend time on reading the puzzle from file and initializing the solver. There is no improvement whatsoever for easy problems, likely because the solution part is significantly smaller than the other parts of the program.</li>
  <li>Somewhat surprisingly, V3 performs orders of magnitude worse than V2, or even V1. So the initial arrangement of doing empty cells in sequence is not random at all. It seems that the proximity of cells matters for the order the are filled in.</li>
  <li>V4 is far better than V2 for the hard problem, but far worse for the medium problem. We are clearly onto something with this heuristic, but it is also clear that this heuristic is not the right one.</li>
</ul>

<p>This is where we confirm our initial hypothesis that we would require far more example sudoku puzzles to check how well our solvers compare on average.</p>

<h2 id="conclusion">Conclusion</h2>

<p>We were able to write a sudoku solver can solve a hard classical sudoku puzzles in less than 10s, which is feasible for daily use. Yay!</p>

<p>The job is certainly not finished yet. We need to figure out the secret of the order of brute-forcing, try some other techniques, and maybe some other sudoku like killer sudoku! Here are the a few ideas I would try from the top of my head:</p>
<ul>
  <li>Try an adaptive ordering, where, after filling each digit, we find the new most constrained digit and fill that one next. That is as human as it gets</li>
  <li>Try an adaptive ordering for constraints. Choose the constraint with the least unfilled digits, fill it in completely, then select the next constraint with the least unfilled digits.</li>
  <li>Try looking ahead: whenever a digit is filled, check what are the remaining possibilities for other digits. If no possibilities remain for at least one other digit, then this arrangement is already wrong.</li>
</ul>

<p>The code for the current solution can be found in <a href="https://github.com/aleksejs-fomins/SudokuSolver">this</a> repository.</p>

<p>Thanks to everybody who read and enjoyed this brief execrise. Stay tuned for more sudoku posts in the future.</p>]]></content><author><name>Aleksejs Fomins</name></author><category term="Meta" /><category term="Sudoku" /><category term="Python" /><category term="Optimization" /><summary type="html"><![CDATA[As an avid sudoku enthusiast, and a fan of Cracking The Cryptic, I frequently find myself needing a little boost from my external brain. So, why not use this as an opportunity to exercise some coding optimization skills as well. In this post, I will cover the generic sudoku solver. In the future posts, I will cover using quick code snippets to brute force through some smaller sub-problems.]]></summary></entry><entry><title type="html">Making this blog</title><link href="http://localhost:4000/meta/making-this-blog/" rel="alternate" type="text/html" title="Making this blog" /><published>2024-02-10T00:00:00+01:00</published><updated>2024-02-10T00:00:00+01:00</updated><id>http://localhost:4000/meta/making-this-blog</id><content type="html" xml:base="http://localhost:4000/meta/making-this-blog/"><![CDATA[<p>In this first post, I would like to give a detailed summary of the engineering behind this blog.</p>

<h2 id="requirements">Requirements</h2>

<p>The hardest requirement in my opinion is the <strong>simplicity of implementation</strong>, as well as <strong>ease of use</strong>. As long as it is flexible enough for my needs, it makes sense to re-use existing functionality, and focus most of the efforts on the actual content. In terms of implentation, that means potentially avoiding any coding whatsoever, simply tuning an off-the-shelf solution. In terms of ease of use and transferability, it makes sense to separate content from implementation. 20 years ago, the simplest solution was to directly write the blog in HTML, or write ones own text parsers in JavaScript. Right now, tools like <a href="https://www.markdownguide.org/getting-started/">markdown</a> allow the writing of blogs more or less in plain text.</p>

<p>Secondly, I lot of the topics of interest to me are science related, and thus benefit greatly from integration of inline <strong>mathematical equations</strong>. While, in theory, any equations can be rendered as images, having automatic parsing of latex equations in the browser is a game changer in terms of development time, and thus <a href="https://www.mathjax.org/">mathjax</a> is a must.</p>

\[E = mc^2\]

<p>Thirdly, as much of my work is coding in various languages (mostly Python recently), it would make sense to be able to have inline <strong>code snippets</strong>. Whenever possible, with syntax highlighting for nicer readability</p>

<div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">template</span> <span class="o">&lt;</span><span class="k">typename</span> <span class="nc">field</span><span class="p">&gt;</span>
<span class="n">field</span> <span class="nf">max</span><span class="p">(</span><span class="n">field</span> <span class="o">&amp;</span><span class="n">a</span><span class="p">,</span> <span class="n">field</span> <span class="o">&amp;</span><span class="n">b</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">return</span> <span class="n">a</span> <span class="o">&gt;</span> <span class="n">b</span> <span class="o">?</span> <span class="n">a</span> <span class="o">:</span> <span class="n">b</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<p>Finally, eventually I would like the ability to itegrate <strong>dynamic figures</strong>, i.e. interactive dashboards and plots.</p>

<h2 id="solutions">Solutions</h2>

<p>I have considered several solutions</p>

<p>Firstly, I have briefly considered fully online solutions, such as <a href="https://wordpress.com/">WordPress</a>. While the simplicitly of using such tools cannot be matched, I wanted a little more control over my blog. It is desirable to have direct access to the full sources of each blog post, so that it could be transfered to another medium (such as a personal website) in the future, should the need arise.</p>

<p>On the opposite end of the spectrum is creating one’s own website and running some existing blog software on it. While certainly the most flexible solution (allowing, for example, a forum self-contained on a local machine), it is also the hardest in terms of the initial time investment, and also the most expensive. Thus, I decided to look for easier solutions first.</p>

<p>After quick googling, I have arrived at a solution called <a href="https://jamstack.org/generators/">static site generators</a>. Such tools take source documents written in markdown language and convert them into a tunable website, such as a blog. The resulting websites to not have a GUI. Instead, new pages are added by writing the corresponding markdown documents in one’s favourite editor, and uploading them directly to the folder where the website is stored. Perhaps a nuisance for some, but coming from Latex background this is quite natural. Better yet, such static website tools are supported by <a href="https://pages.github.com/">GitHub pages</a>, allowing anyone with a github account to have a blog for free, simply by storing the website source in a corresponding github repository. There is a multitude of static site generators. I have briefly experimented with <a href="https://gohugo.io/">Hugo</a> and <a href="https://jekyllrb.com/">Jekyll</a>, and settled on the latter, mostly because I had found a stumbled on a nice guide to help me with the setup process.</p>

<h2 id="installation">Installation</h2>

<p>Firstly, I needed to create a dummy website on <a href="https://pages.github.com/">GitHub pages</a>,. It is as simple as creating the repository with a very specific name on your github. The instructions on the official website are very clear. I had to wait for quite a bit for the correct URL to start showing the dummy website, maybe half an hour, before it was showing nothing. One suggestion I had found was to rewrite the dummy website in proper HTML. I did it, but I am not sure it was necessary, as the official guide uses plain text.</p>

<p>Next, I needed to install Jekyll on my home computer, download an example theme, test it, and upload it to the git repository. I followed a combination of steps on <a href="https://medium.com/coffee-in-a-klein-bottle/creating-a-mathematics-blog-with-jekyll-78cdee0339f3">this blog</a>, as well as the originall Jekyll installation guide. The guide uses the <a href="git clone https://github.com/jekyll/minima.git">minima</a> theme, one of the simplest Jekyll themes. The guide mentioned that enabling mathjax was a bit of a hack, requiring the appending of a few extra script URLS in a defaults file. This suggestion no longer works. After some googling, I had found a solution that worked at the time of writing on <a href="https://www.martinklein.co/2022/02/18/latex-in-jekyll.html">another blog</a>.</p>

<p>I am doing all of my development in Ubuntu Linux. Here, in order to view the website, it is sufficient to navigate to the website location in the terminal, running the following command</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>bundle exec jekyll serve --livereload
</code></pre></div></div>
<p>followed by running the link from the terminal in a web browser. When editing pages in a text editor, one can simply refresh the page in the browser to see the edits. However, changes in the configuration files do not propagate immediately. One needs to stop the terminal job and restart it to see the results locally.</p>

<h2 id="customization">Customization</h2>

<p>Since customization of a theme is theme-dependent, it was helpful to select a nice theme first. I have looked at the themes highlighted in <a href="https://github.com/topics/jekyll-theme">this github post</a>, and selected the theme <a href="https://mmistakes.github.io/minimal-mistakes/about/">minimal-mistakes</a> by Michael Rose. The quick-start guide in this page is extremely detailed and well-written, so I highly recommend going through it if this theme takes your fancy.</p>

<p>Since this is a different theme, I first needed to figure out how to enable Mathjax. After reading the documentation of the theme, I had found that external head/body scripts could be specified directly in the <code class="language-plaintext highlighter-rouge">_config.yml</code> file, which seemed to me far nicer than “hacking” some of the source files of the theme without fully understanding how it works. I tried to add the following edit to the config file, and it worked like a charm (needed to restart jekyll for it to take action).</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code># Scripts for mathjax
head_scripts:
  - https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.7/MathJax.js?config=TeX-MML-AM_CHTML
</code></pre></div></div>

<p>Here’s a Gauss’ law to celebrate this achievement</p>

\[\iiint_V \nabla \cdot \vec{E}dV = \oint_S \vec{E}\cdot d\vec{S}\]

<p>Here’s a list of other minor optimizations I have done by editing the config file:</p>
<ul>
  <li>Selected the “dirt” theme</li>
  <li>Added a path to the profile picture</li>
  <li>Added the name of the blog</li>
  <li>Added my bio, and a few links to other pages, such as my github and stackexchange.</li>
</ul>

<p>By the way, I had noticed that the theme was pulling the logos of the websites for links from <a href="https://fontawesome.com/v5/search?q=stackexchange&amp;o=r">this awesome website</a> as font characters. Since StackExchange was not in the theme by default, it just took a few clicks on the FontAwesome website to find the correct logo and import the corresponding text.</p>]]></content><author><name>Aleksejs Fomins</name></author><category term="Meta" /><category term="Jekyll" /><category term="Github" /><summary type="html"><![CDATA[In this first post, I would like to give a detailed summary of the engineering behind this blog.]]></summary></entry><entry><title type="html">A critique of psychometrics</title><link href="http://localhost:4000/meta/is-psychometrics-a-science/" rel="alternate" type="text/html" title="A critique of psychometrics" /><published>2023-12-20T00:00:00+01:00</published><updated>2023-12-20T00:00:00+01:00</updated><id>http://localhost:4000/meta/is-psychometrics-a-science</id><content type="html" xml:base="http://localhost:4000/meta/is-psychometrics-a-science/"><![CDATA[<p>Recently I have briefly worked in psychometrics, on the task of measuring a concept related to human well-being. Reading in detail about a dozen publications in the field has left me utterly puzzled. I am unable to establish a bridge between the scientific method I was trained in as a physicist, and the practices employed in psychometric research. In this post I attempt to structure my confused thoughts, and present, as clearly as I can, the questions that I am unable to find the answer to. For some of the questions I struggle to see how they can have an answer</p>

<h2 id="what-is-psychometrics">What is psychometrics</h2>

<h2 id="what-is-the-typical-procedure-employed-in-psychometrics">What is the typical procedure employed in psychometrics</h2>

<p>There is a large demand for measuring quantities related to human health and intelligence. This may include, for example, general health, severity of a mental disorder, general intelligence (e.g. IQ), or skill in a certain specialized discipline, such as calculus or art history of the 16th century. It is then the task of a psychometrist to construct and test a metric that would measure the quantity of interest. As far as I have understood, modern psychometrists use the following procedure to construct a measure they are interested in:</p>

<ol>
  <li>Existence of a <strong>latent construct</strong> is assumed - a scalar latent variable which quantifies the concept of interest. This variable is assumed to be monotonic: lower or greater value of this variable would imply that the person is more or less depressed, more or less healthy, more or less intelligent, depending on the measurement objective.</li>
  <li>A <strong>survey</strong> of a few dosen questions is assembled to assess <em>assess the latent construct</em>. In other words, it is assumed that the answers to the questions in such a survey are in a monotonic relationship with the latent variable. For example, the question “Rate 1-10 how hard it is for you to get out of bed in the morning” could be used to assess depressiveness, under the assumption that higher depressiveness would generally result in higher difficulty of getting out of bed, and thus higher-valued answer to this question.
    <ul>
      <li>Multiple questions are used, as individual answers may be noisy, and individual questions may be selective only in some range of the latent variable. For example, a question to compute “2+2*2” would be useful to detect people who have not studied at primary school, but would not be useful at distinguishing the skill of trained mathematicians, as all of them would answer the question correctly, given enough motivation to do so.</li>
    </ul>
  </li>
  <li>The researcher would assume a <strong>statistical model</strong>, linking a person’s latent construct value to the probabilities of different answers that person might choose when filling the survey. A typical model used for this purpose is the <a href="https://en.wikipedia.org/wiki/Rasch_model">Rasch model</a> and its extensions. Given the person’s latent construct variable, and a difficulty parameter of the question, the model would provide a probability distribution of all possible answers to that question by that person.</li>
  <li>A survey is conducted, <strong>collecting answers</strong> from multiple participants. Question answers from all participants are collected into a single dataset.</li>
  <li>The selected <strong>model is fitted</strong> to the dataset, simultaneously estimating latent variables for each person, and question-specific parameters (such as difficulty).</li>
  <li>The individual <strong>latent variables are reported</strong> on the same scale. Since, for example, a depressiveness of 5.3 may be hard to interpret, the latent values are frequently reported as quantiles within the general population. This may be written as “person A is among the 10% most depressive people”, or “among the 20% least depressive people”.</li>
</ol>

<h2 id="how-and-how-precisely-are-the-measurement-targets-typically-defined">How and how precisely are the measurement targets typically defined?</h2>

<p>In order to measure something, it needs to first be defined. AFAIK, concepts of interest to psychometricians, such as depression, health, or intelligence have reasonably vague definitions. How do psychometricians justify trying to make precise measurements of quantities that do not have precise definitions?</p>

<h2 id="how-is-unidimensionality-of-the-construct-assessed-what-are-the-typical-assessement-outcomes">How is unidimensionality of the construct assessed? What are the typical assessement outcomes?</h2>

<p>In order for it to be meaningful to measure the latent construct with a scalar variable, it must be demonstrated that that the construct is unidimensional. In other words, a single scalar variable is sufficient to describe individual differences in regard to this construct. Mathematicians have a handy tool for checking if objects can be placed on a monotonic unidimensional scale: if, for any three objects, it is possible to order those objects in the order from lowest to highest value of the latent variable, then the variable is unidimensional. For example, obesity as measured by percent body fat is a unidimensional construct - any number of people can be unambiguously sorted with regards to such a metric. However, diet quality is not a unidimensional construct. It is not possible to objectively order people who have severe caloric deficiency, iron deficiency and B-vitamin deficiency respectively in the order from best to worst diet quality. This indicates that calories, minerals and vitamins are different dimensions of diet quality, and diet quality is thus a multidimensional construct.</p>

<h2 id="how-is-the-validity-of-the-questions-assessed-what-are-the-typical-assessment-outcomes">How is the validity of the questions assessed? What are the typical assessment outcomes?</h2>

<p>This question really has two parts:</p>
<ol>
  <li>Are the answers to the question at all related to the latent construct? Do these quantities co-vary?</li>
  <li>How strongly is the question related to the latent construct? How strongly are they confounded by sources unrelated to the latent construct?</li>
</ol>

<p>I am tempted to immediately answer that the validity of such questions cannot be assessed, as it is unclear to me, how a question can be demonstrated to measure a certain quantity, when that quantity is loosely defined at best, or defined through the very same questions at worst. However, the field of psychometrics has invested a large amount of effort in establishing good practices on how such questions are to be selected and tuned, so we might as well take a look.</p>

<p>Next, let us have a look how psychometrics deals with confounding variables. First, let me indulge a little in brainstorming what these confounding variables could be. Some people might not answer the questions truthfully. Some people may be in a bad mood. Some people may feel differently about their experience in different parts of the day. Some may not be able to describe the experience well or consistently. Note that these are mostly related to the measurement of health, and to a far lesser extent to the measurement of intelligence. It is not unreasonable to assume that having only one correct answer and a strong incentive to answer correctly would naturally act to reduce the confounding in the case of IQ.</p>

<h2 id="how-are-the-statistical-models-validated">How are the statistical models validated?</h2>

<p>Do psychometricians justify the choice of their model, outside of the model itself? It fits, after a bit of tweaking. Ok, so what? Fitness alone is not meaningful. Importantly, any residual variance not fitted by the model is assumed to be noise. But what if it is not? There needs to be at least some amount of mechanistic understanding as to why a given model should be meaningful in explaining the process in question. Is this ever done?</p>]]></content><author><name>Aleksejs Fomins</name></author><category term="Meta" /><category term="Psychometrics" /><category term="Science" /><category term="Opinion" /><summary type="html"><![CDATA[Recently I have briefly worked in psychometrics, on the task of measuring a concept related to human well-being. Reading in detail about a dozen publications in the field has left me utterly puzzled. I am unable to establish a bridge between the scientific method I was trained in as a physicist, and the practices employed in psychometric research. In this post I attempt to structure my confused thoughts, and present, as clearly as I can, the questions that I am unable to find the answer to. For some of the questions I struggle to see how they can have an answer]]></summary></entry></feed>